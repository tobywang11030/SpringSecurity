#端口
server.port=8081
server.servlet.session.cookie.name=OAUTH2SESSION
#SSH 证书
#server.ssl.key-store:classpath:toby.keystore
#证书秘钥
#server.ssl.key-store-password:123456
#server.ssl.keyStoreType:JKS
#server.ssl.keyAlias:toby
#数据库
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/spring?characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=1qazxsw2
#EhCache
spring.cache.ehcache.config=ehcache.xml
# GitHub SSO
github.client.clientId=4ef60eb870d75e7b2195
github.client.clientSecret=82f0681d29295e62f9a6b4fd29ad5b8baf5155b9
github.client.accessTokenUri=https://github.com/login/oauth/access_token
github.client.userAuthorizationUri=https://github.com/login/oauth/authorize
github.resource.userInfoUri=https://api.github.com/user
github.resource.preferTokenInfo=false

# cas SSO
cas.client.clientId=toby
cas.client.clientSecret=123456
#步骤2，使用第一步获得的授权码code调用此接口获得accesstoken
cas.client.accessTokenUri=http://10.32.152.188:8080//oauth/token
#步骤1，调用此接口获得授权吗，如Client的autoapprove属性为true，或者配置的scope与请求的scope相同，则不会跳转到用户授权界面，而是隐性的后台静默授权
cas.client.userAuthorizationUri=http://10.32.152.188:8080//oauth/authorize
#配置此应用全局向认证中心请求的Scope，如不配置，则认证中心会取数据库client的所有scope
#备注，client的scope属性必须全部包含这里配置的scope，否则会报非法scope异常
cas.client.scope=base_info,user_info
#步骤3，获得AccessToken后调用此接口拿到用户信息后封装Authorization对象完成SSO认证
cas.resource.userInfoUri=http://10.32.152.188:8080//user/me
cas.resource.preferTokenInfo=false
#SMS
sms.apiid=C85581463
sms.apikey=6e2edf4f7c44fb2849cde5e7b82dc87b
sms.endpoint=http://106.ihuyi.com/webservice/sms.php

